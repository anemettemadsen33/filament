# RentHub Nginx Configuration
# Optimized for Lighthouse Performance with Brotli Compression
# 
# This configuration is designed to maximize performance scores by:
# 1. Enabling Brotli compression for better file size reduction
# 2. Setting aggressive caching policies for static assets
# 3. Configuring security headers
# 4. Optimizing HTTP/2 settings

server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # ===============================
    # COMPRESSION CONFIGURATION
    # ===============================
    
    # Disable Gzip (Brotli is better)
    gzip off;
    
    # Enable Brotli Compression
    # Note: Requires ngx_brotli module
    # Install: https://github.com/google/ngx_brotli
    brotli on;
    brotli_comp_level 6;  # Balance between compression ratio and CPU usage (1-11)
    brotli_static on;     # Serve pre-compressed .br files if available
    brotli_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/xml+rss
        application/rss+xml
        application/atom+xml
        image/svg+xml
        font/truetype
        font/opentype
        font/woff
        font/woff2;
    
    # Fallback to Gzip if Brotli module not available
    # Uncomment these lines if Brotli is not installed
    # gzip on;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss application/rss+xml image/svg+xml;
    
    # ===============================
    # CACHING CONFIGURATION
    # ===============================
    
    # Cache static assets aggressively (1 year)
    # Files with hashes in their names can be cached indefinitely
    location ~* ^/assets/.+\.(js|css|png|jpg|jpeg|gif|webp|avif|svg|ico|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        
        # Enable Brotli for static assets
        brotli on;
        brotli_static on;
    }
    
    # Cache images with moderate TTL
    location ~* \.(png|jpg|jpeg|gif|webp|avif|svg|ico)$ {
        expires 30d;
        add_header Cache-Control "public, max-age=2592000";
        access_log off;
    }
    
    # Cache fonts
    location ~* \.(woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        access_log off;
    }
    
    # Don't cache HTML files (SPA routing)
    location ~* \.html?$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # ===============================
    # SPA ROUTING CONFIGURATION
    # ===============================
    
    # Handle SPA client-side routing
    # Redirect all non-file requests to index.html
    location / {
        try_files $uri $uri/ /index.html;
        
        # Don't cache index.html
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # ===============================
    # PERFORMANCE OPTIMIZATIONS
    # ===============================
    
    # Enable TCP optimizations
    tcp_nodelay on;
    tcp_nopush on;
    
    # Increase buffer sizes for better performance
    client_body_buffer_size 10K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 2 1k;
    
    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;
    
    # ===============================
    # ERROR PAGES
    # ===============================
    
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# HTTPS Configuration (Production)
# Uncomment and configure for production use with SSL certificates
#
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name yourdomain.com;
#     
#     root /usr/share/nginx/html;
#     index index.html;
#     
#     # SSL Certificate Configuration
#     ssl_certificate /etc/nginx/ssl/cert.pem;
#     ssl_certificate_key /etc/nginx/ssl/key.pem;
#     
#     # SSL Security Settings
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers on;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # HTTP/2 Push for critical resources (optional)
#     # http2_push /assets/css/main.css;
#     # http2_push /assets/js/vendor.js;
#     
#     # Include all other directives from HTTP configuration above
#     include /etc/nginx/conf.d/common.conf;
# }
