name: Build and Test

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Frontend Build and Test
  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./Renthub
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'Renthub/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Run TypeScript check
        run: npx tsc --noEmit --skipLibCheck
        continue-on-error: true

      - name: Run unit tests
        run: npm run test:run
        continue-on-error: true

      - name: Run tests with coverage
        run: npm run test:coverage
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./Renthub/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check bundle size
        run: |
          echo "## Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f dist/stats.html ]; then
            echo "Bundle analysis available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -d dist ]; then
            echo "### Build Output" >> $GITHUB_STEP_SUMMARY
            du -sh dist >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Asset Sizes" >> $GITHUB_STEP_SUMMARY
            find dist -type f -name "*.js" -exec du -h {} \; | sort -h | tail -20 >> $GITHUB_STEP_SUMMARY || true
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: Renthub/dist
          retention-days: 7

      - name: Upload bundle stats
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-stats
          path: Renthub/dist/stats.html
          retention-days: 7

  # Backend Build and Test
  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./Rental-Platform-main/backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testing
          POSTGRES_USER: testing
          POSTGRES_PASSWORD: testing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_pgsql, intl, zip
          coverage: xdebug
          tools: composer:v2

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Prepare Laravel application
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:clear
          php artisan cache:clear
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing

      - name: Run database migrations
        run: php artisan migrate --force
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing

      - name: Run PHPUnit tests
        run: php artisan test --parallel
        continue-on-error: true
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing

      - name: Run PHPUnit with coverage
        run: vendor/bin/phpunit --coverage-clover coverage.xml
        continue-on-error: true
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./Rental-Platform-main/backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit (Frontend)
        run: |
          cd Renthub
          npm audit --audit-level=moderate --json > npm-audit.json || true
          
      - name: Run composer audit (Backend)
        run: |
          cd Rental-Platform-main/backend
          composer audit --format=json > composer-audit.json || true
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            Renthub/npm-audit.json
            Rental-Platform-main/backend/composer-audit.json
          retention-days: 30

  # Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build, security-scan]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Build: ${{ needs.frontend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Build: ${{ needs.backend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend dist files" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle analysis report" >> $GITHUB_STEP_SUMMARY
          echo "- Test coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "- Security scan results" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Build Summary')
            );
            
            const output = `## ðŸ”¨ Build Summary
            
            | Job | Status |
            |-----|--------|
            | Frontend Build | ${{ needs.frontend-build.result }} |
            | Backend Build | ${{ needs.backend-build.result }} |
            | Security Scan | ${{ needs.security-scan.result }} |
            
            ### Artifacts Available
            - Frontend build artifacts
            - Bundle analysis report
            - Test coverage reports
            - Security scan results
            
            <sub>Build #${context.runNumber} â€¢ Commit ${context.sha.substring(0, 7)}</sub>`;
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
