name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
        default: 'staging'

permissions:
  contents: read
  deployments: write

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Build Frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'Renthub/package-lock.json'

      - name: Install dependencies
        run: |
          cd Renthub
          npm ci

      - name: Build application
        run: |
          cd Renthub
          npm run build
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_VAPID_PUBLIC_KEY: ${{ secrets.VITE_VAPID_PUBLIC_KEY }}

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: Renthub/dist
          retention-days: 1

  # Build Backend
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_pgsql, intl, zip
          tools: composer:v2

      - name: Install Composer dependencies
        run: |
          cd Rental-Platform-main/backend
          composer install --no-dev --prefer-dist --no-progress --optimize-autoloader

      - name: Optimize Laravel
        run: |
          cd Rental-Platform-main/backend
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
        env:
          APP_ENV: production

      - name: Upload backend build
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            Rental-Platform-main/backend
            !Rental-Platform-main/backend/node_modules
            !Rental-Platform-main/backend/tests
            !Rental-Platform-main/backend/.env
          retention-days: 1

  # Deploy to Server
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.APP_URL }}
    
    steps:
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend-dist

      - name: Download backend build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./backend-dist

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r frontend-dist deployment/public
          cp -r backend-dist/* deployment/
          tar -czf deployment.tar.gz -C deployment .

      - name: Deploy via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/tmp"

      - name: Execute deployment script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            set -e
            
            # Configuration
            APP_DIR="${{ vars.APP_DIR || '/var/www/renthub' }}"
            BACKUP_DIR="${APP_DIR}/backups"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            
            echo "üöÄ Starting deployment..."
            
            # Create backup
            echo "üì¶ Creating backup..."
            mkdir -p $BACKUP_DIR
            if [ -d "$APP_DIR/current" ]; then
              tar -czf "$BACKUP_DIR/backup_$TIMESTAMP.tar.gz" -C "$APP_DIR" current
            fi
            
            # Extract new deployment
            echo "üìÇ Extracting deployment package..."
            mkdir -p "$APP_DIR/releases/$TIMESTAMP"
            tar -xzf /tmp/deployment.tar.gz -C "$APP_DIR/releases/$TIMESTAMP"
            
            # Copy environment file
            if [ -f "$APP_DIR/.env" ]; then
              cp "$APP_DIR/.env" "$APP_DIR/releases/$TIMESTAMP/.env"
            fi
            
            # Run migrations
            echo "üîÑ Running database migrations..."
            cd "$APP_DIR/releases/$TIMESTAMP"
            php artisan migrate --force
            
            # Link new release
            echo "üîó Updating symlink..."
            rm -f "$APP_DIR/current"
            ln -s "$APP_DIR/releases/$TIMESTAMP" "$APP_DIR/current"
            
            # Clear caches
            echo "üßπ Clearing caches..."
            php artisan cache:clear
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            
            # Reload services
            echo "‚ôªÔ∏è Reloading services..."
            sudo systemctl reload php8.2-fpm || true
            sudo systemctl reload nginx || true
            
            # Cleanup old releases (keep last 5)
            echo "üßπ Cleaning up old releases..."
            cd "$APP_DIR/releases"
            ls -t | tail -n +6 | xargs -r rm -rf
            
            # Cleanup old backups (keep last 10)
            cd "$BACKUP_DIR"
            ls -t | tail -n +11 | xargs -r rm -f
            
            echo "‚úÖ Deployment completed successfully!"

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            APP_DIR="${{ vars.APP_DIR || '/var/www/renthub' }}"
            cd "$APP_DIR/current"
            
            # Check if application is responding
            echo "üîç Verifying deployment..."
            php artisan --version
            
            # Health check
            curl -f -s -o /dev/null -w "%{http_code}" ${{ vars.APP_URL }}/health || echo "Warning: Health check failed"

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            set -e
            APP_DIR="${{ vars.APP_DIR || '/var/www/renthub' }}"
            BACKUP_DIR="${APP_DIR}/backups"
            
            echo "‚ö†Ô∏è Deployment failed, initiating rollback..."
            
            # Find latest backup
            LATEST_BACKUP=$(ls -t $BACKUP_DIR/backup_*.tar.gz | head -1)
            
            if [ -n "$LATEST_BACKUP" ]; then
              echo "üì¶ Restoring from backup: $LATEST_BACKUP"
              rm -rf "$APP_DIR/current"
              mkdir -p "$APP_DIR/rollback"
              tar -xzf "$LATEST_BACKUP" -C "$APP_DIR/rollback"
              ln -s "$APP_DIR/rollback/current" "$APP_DIR/current"
              
              # Reload services
              sudo systemctl reload php8.2-fpm || true
              sudo systemctl reload nginx || true
              
              echo "‚úÖ Rollback completed"
            else
              echo "‚ùå No backup found for rollback"
              exit 1
            fi

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ Success' : '‚ùå Failed';
            const environment = '${{ github.event.inputs.environment || 'production' }}';
            
            const output = `## üöÄ Deployment ${status}
            
            **Environment:** ${environment}
            **Commit:** ${context.sha.substring(0, 7)}
            **Triggered by:** ${context.actor}
            **Workflow:** ${context.workflow}
            
            ${status === '‚úÖ Success' ? '‚ú® Application deployed successfully!' : '‚ö†Ô∏è Deployment failed. Rollback initiated.'}
            `;
            
            // Create deployment comment
            if (context.eventName === 'push') {
              github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: output
              });
            }

  # Post-deployment health check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
      - name: Wait for services
        run: sleep 10

      - name: Check application health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.APP_URL }}/health)
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Health check passed (HTTP $response)"
          else
            echo "‚ùå Health check failed (HTTP $response)"
            exit 1
          fi

      - name: Check frontend
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.APP_URL }})
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Frontend check passed (HTTP $response)"
          else
            echo "‚ùå Frontend check failed (HTTP $response)"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          # Add smoke test commands here
          # Example: curl -f ${{ vars.APP_URL }}/api/properties
          echo "‚úÖ Smoke tests passed"
