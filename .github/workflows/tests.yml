name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  # Backend tests (Laravel + PHPUnit)
  backend-tests:
    name: Backend Tests (Laravel + PHPUnit)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testing
          POSTGRES_USER: testing
          POSTGRES_PASSWORD: testing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_pgsql, intl, zip
          coverage: xdebug
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          cd Rental-Platform-main/backend
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: |
          cd Rental-Platform-main/backend
          composer install --prefer-dist --no-progress --no-interaction

      - name: Prepare Laravel Application
        run: |
          cd Rental-Platform-main/backend
          cp .env.example .env
          php artisan key:generate
          php artisan config:clear
          php artisan cache:clear
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing

      - name: Run PHPUnit tests
        run: |
          cd Rental-Platform-main/backend
          php artisan migrate --force
          php artisan db:seed --class=RolesAndPermissionsSeeder --force
          # Note: Coverage threshold set to 50% temporarily due to legacy code
          # TODO: Gradually increase coverage to 80% over next 3 sprints
          php artisan test --coverage --min=50
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing
          SCOUT_DRIVER: null

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./Rental-Platform-main/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend tests (React + Vitest)
  frontend-tests:
    name: Frontend Tests (React + Vitest)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'Renthub/package-lock.json'

      - name: Install dependencies
        run: |
          cd Renthub
          npm ci

      - name: Run linter
        run: |
          cd Renthub
          npm run lint

      - name: Run unit tests
        run: |
          cd Renthub
          npm run test:run

      - name: Run tests with coverage
        run: |
          cd Renthub
          npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./Renthub/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # E2E tests (Playwright)
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'Renthub/package-lock.json'

      - name: Install dependencies
        run: |
          cd Renthub
          npm ci
          npx playwright install --with-deps

      - name: Build application
        run: |
          cd Renthub
          npm run build

      - name: Run Playwright tests
        run: |
          cd Renthub
          npx playwright test

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: Renthub/playwright-report/
          retention-days: 30

  # Code quality checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ESLint
        run: |
          cd Renthub
          npm ci
          npm run lint
        continue-on-error: true

      - name: Run TypeScript check
        run: |
          cd Renthub
          npx tsc --noEmit
        continue-on-error: true

      - name: Security audit (npm)
        run: |
          cd Renthub
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Security audit (composer)
        run: |
          cd Rental-Platform-main/backend
          composer audit
        continue-on-error: true

  # Test results summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, code-quality]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… All test suites completed" >> $GITHUB_STEP_SUMMARY
          echo "- Backend tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
