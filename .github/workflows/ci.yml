name: CI - Backend and Frontend

# Trigger on push to main and pull requests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Explicit permissions for security
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Backend CI - PHP Laravel + Filament
  backend:
    name: Backend CI (PHP 8.2)
    runs-on: ubuntu-latest
    
    # Service containers for testing
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup PHP with extensions needed for Laravel
      - name: Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, dom, filter, gd, json, zip
          coverage: xdebug
          tools: composer:v2

      # Cache Composer dependencies for faster builds
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            Rental-Platform-main/backend/vendor
            ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Install PHP dependencies
      - name: Install Composer dependencies
        working-directory: Rental-Platform-main/backend
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      # Copy environment file for testing
      - name: Prepare environment
        working-directory: Rental-Platform-main/backend
        run: |
          cp .env.example .env
          php artisan key:generate

      # Run Laravel Pint for code style checking
      - name: Run Laravel Pint (Code Style)
        working-directory: Rental-Platform-main/backend
        run: |
          if [ -f "vendor/bin/pint" ]; then
            ./vendor/bin/pint --test
          else
            echo "Laravel Pint not installed, skipping..."
          fi
        continue-on-error: true

      # Run PHPStan for static analysis
      - name: Run PHPStan (Static Analysis)
        working-directory: Rental-Platform-main/backend
        run: |
          if [ -f "vendor/bin/phpstan" ]; then
            ./vendor/bin/phpstan analyse --memory-limit=2G
          else
            echo "PHPStan not installed, skipping..."
          fi
        continue-on-error: true

      # Run PHPUnit tests with coverage
      - name: Run PHPUnit Tests
        working-directory: Rental-Platform-main/backend
        run: |
          php artisan config:clear
          php artisan cache:clear
          ./vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-html=reports/coverage
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password

      # Upload PHPUnit coverage reports
      - name: Upload Backend Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage
          path: Rental-Platform-main/backend/reports/coverage
          retention-days: 30

  # Frontend CI - React + TypeScript + Vite
  frontend:
    name: Frontend CI (Node 20)
    runs-on: ubuntu-latest

    steps:
      # Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js with caching
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'Renthub/package-lock.json'

      # Install frontend dependencies
      - name: Install Dependencies
        working-directory: Renthub
        run: npm ci

      # Run ESLint for code quality
      - name: Run ESLint
        working-directory: Renthub
        run: npm run lint
        continue-on-error: true

      # Run TypeScript type checking
      - name: TypeScript Type Check
        working-directory: Renthub
        run: npx tsc --noEmit

      # Run Vitest unit tests with coverage
      - name: Run Vitest Tests
        working-directory: Renthub
        run: npm run test:coverage

      # Build the application to ensure it compiles
      - name: Build Application
        working-directory: Renthub
        run: npm run build

      # Upload frontend coverage reports
      - name: Upload Frontend Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: Renthub/reports/coverage
          retention-days: 30

      # Upload build artifacts for debugging
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-output
          path: Renthub/dist
          retention-days: 7

  # CodeQL Security Scanning (optional but recommended)
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'php' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initialize CodeQL for security scanning
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      # Autobuild for CodeQL analysis
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # Combined coverage upload (optional)
  coverage:
    name: Upload Coverage
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download backend coverage
      - name: Download Backend Coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: coverage/backend
        continue-on-error: true

      # Download frontend coverage
      - name: Download Frontend Coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: coverage/frontend
        continue-on-error: true

      # Upload to Codecov (if CODECOV_TOKEN is configured)
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        if: ${{ env.CODECOV_TOKEN != '' }}
        with:
          directory: ./coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true
