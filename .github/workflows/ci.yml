name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  # Backend: Lint, Test, Build
  backend-ci:
    name: Backend CI (Laravel)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testing
          POSTGRES_USER: testing
          POSTGRES_PASSWORD: testing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_pgsql, intl, zip, gd
          coverage: xdebug
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          cd Rental-Platform-main/backend
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: |
          cd Rental-Platform-main/backend
          composer install --prefer-dist --no-progress --no-interaction

      - name: Copy .env and prepare Laravel
        run: |
          cd Rental-Platform-main/backend
          cp .env.example .env
          php artisan key:generate
          php artisan config:clear
          php artisan cache:clear
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing

      - name: Run PHPStan (Static Analysis)
        run: |
          cd Rental-Platform-main/backend
          # Install PHPStan if not already in composer.json
          composer require --dev phpstan/phpstan --no-interaction || true
          vendor/bin/phpstan analyse --memory-limit=2G || true
        continue-on-error: true

      - name: Run Laravel Pint (Code Style)
        run: |
          cd Rental-Platform-main/backend
          vendor/bin/pint --test || true
        continue-on-error: true

      - name: Run Database Migrations
        run: |
          cd Rental-Platform-main/backend
          php artisan migrate --force
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing

      - name: Run PHPUnit Tests
        run: |
          cd Rental-Platform-main/backend
          php artisan test --coverage --min=60
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing

      - name: Run Composer Security Audit
        run: |
          cd Rental-Platform-main/backend
          composer audit
        continue-on-error: true

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./Rental-Platform-main/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend: Lint, Test, Build
  frontend-ci:
    name: Frontend CI (React + TypeScript)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'Renthub/package-lock.json'

      - name: Install dependencies
        run: |
          cd Renthub
          npm ci

      - name: Run ESLint
        run: |
          cd Renthub
          npm run lint
        continue-on-error: true

      - name: Run TypeScript Type Check
        run: |
          cd Renthub
          npx tsc --noEmit

      - name: Run Vitest Unit Tests
        run: |
          cd Renthub
          npm run test:run

      - name: Run Tests with Coverage
        run: |
          cd Renthub
          npm run test:coverage

      - name: Build Application
        run: |
          cd Renthub
          npm run build

      - name: Run npm Security Audit
        run: |
          cd Renthub
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./Renthub/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: Renthub/dist/
          retention-days: 7

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Docker Build (Optional)
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Docker Image
        run: |
          cd Rental-Platform-main/backend
          docker build -t renthub-backend:${{ github.sha }} .
        continue-on-error: true

  # Status Summary
  ci-status:
    name: CI Status Summary
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, security-scan]
    if: always()

    steps:
      - name: Check CI Status
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend CI | ${{ needs.backend-ci.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend CI | ${{ needs.frontend-ci.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.backend-ci.result }}" != "success" ]] || [[ "${{ needs.frontend-ci.result }}" != "success" ]]; then
            echo "❌ CI Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ CI Pipeline Passed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `## CI Pipeline Results
            
            | Job | Status |
            |-----|--------|
            | Backend CI | ${{ needs.backend-ci.result }} |
            | Frontend CI | ${{ needs.frontend-ci.result }} |
            | Security Scan | ${{ needs.security-scan.result }} |
            
            ${
              '${{ needs.backend-ci.result }}' !== 'success' || '${{ needs.frontend-ci.result }}' !== 'success'
                ? '❌ **CI Failed** - Please fix the issues before merging'
                : '✅ **CI Passed** - Ready for review'
            }`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
