name: Lighthouse Performance Audit

on:
  # Daily audit at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Trigger on pull requests to main
  pull_request:
    branches:
      - main
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  lighthouse:
    name: Run Lighthouse CI
    runs-on: ubuntu-latest
    
    # Explicit permissions for security best practices and PR comments
    permissions:
      contents: read  # Read repository contents
      pull-requests: write  # Post PR comments
      issues: write  # Update issue comments
    
    steps:
      # Step 1: Checkout the repository
      # This pulls the code from the repository so we can work with it
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Setup Node.js environment
      # Install Node.js 18 which is required for the project
      # Cache npm dependencies to speed up subsequent runs
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'Renthub/package-lock.json'
      
      # Step 3: Install project dependencies
      # Use 'npm ci' for clean install based on package-lock.json
      # This ensures reproducible builds
      - name: Install dependencies
        run: |
          cd Renthub
          npm ci
      
      # Step 4: Install Lighthouse CI globally
      # This provides the 'lhci' command for running audits
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.13.x
      
      # Step 5: Build the application
      # Compile TypeScript and bundle the Vite app for production
      - name: Build application
        run: |
          cd Renthub
          npm run build
      
      # Step 6: Start preview server in background
      # The preview server serves the built application
      # We use '&' to run it in background and wait-on to ensure it's ready
      - name: Start preview server
        run: |
          cd Renthub
          npm run preview &
          npx wait-on http://localhost:4173 --timeout 60000
      
      # Step 7: Run Lighthouse CI with autorun
      # This automatically discovers URLs and runs audits
      # Reports are generated in .lighthouseci folder
      - name: Run Lighthouse CI
        run: |
          cd Renthub
          lhci autorun
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}
          LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          LHCI_BUILD_CONTEXT__AUTHOR: ${{ github.event.head_commit.author.name }}
      
      # Step 8: Upload Lighthouse reports as artifact
      # Artifacts are stored for 30 days and can be downloaded from the Actions tab
      # if-no-files-found: warn - won't fail if .lighthouseci folder is empty
      # compression-level: 6 - good balance between speed and size
      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports-phase1
          path: Renthub/.lighthouseci
          retention-days: 30
          if-no-files-found: warn
          compression-level: 6
      
      # Step 9: Copy reports to lighthouse-reports/phase1 for historical tracking
      - name: Save Phase 1 reports
        if: always()
        run: |
          mkdir -p lighthouse-reports/phase1
          cp -r Renthub/.lighthouseci/* lighthouse-reports/phase1/ || true
          echo "Phase 1 Optimization - $(date)" > lighthouse-reports/phase1/README.txt
          echo "Branch: ${{ github.ref_name }}" >> lighthouse-reports/phase1/README.txt
          echo "Commit: ${{ github.sha }}" >> lighthouse-reports/phase1/README.txt
      
      # Step 10: Upload phase1 reports as separate artifact
      - name: Upload Phase 1 tracking reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-phase1-tracking
          path: lighthouse-reports/phase1
          retention-days: 90
          if-no-files-found: warn
      
      # Step 11: Generate summary report for PR comment
      - name: Generate Summary Report
        if: github.event_name == 'pull_request'
        id: summary
        working-directory: Renthub
        run: |
          # Find the latest report files
          REPORT_DIR=".lighthouseci"
          
          # Create a markdown summary
          echo "## 🔍 Lighthouse Performance Audit Results" > summary.md
          echo "" >> summary.md
          echo "**Build**: #${{ github.run_number }}" >> summary.md
          echo "**Commit**: ${{ github.sha }}" >> summary.md
          echo "" >> summary.md
          
          # Check if reports exist
          if [ -d "$REPORT_DIR" ] && [ "$(ls -A $REPORT_DIR)" ]; then
            echo "✅ Lighthouse audits completed successfully!" >> summary.md
            echo "" >> summary.md
            echo "### 📊 Report Artifacts" >> summary.md
            echo "Download detailed HTML and JSON reports from the workflow artifacts." >> summary.md
            echo "" >> summary.md
            echo "### 🎯 Key Metrics to Review" >> summary.md
            echo "- **Performance Score**: Check overall performance rating" >> summary.md
            echo "- **First Contentful Paint (FCP)**: Should be < 1.8s" >> summary.md
            echo "- **Largest Contentful Paint (LCP)**: Should be < 2.5s" >> summary.md
            echo "- **Total Blocking Time (TBT)**: Should be < 200ms" >> summary.md
            echo "- **Cumulative Layout Shift (CLS)**: Should be < 0.1" >> summary.md
            echo "" >> summary.md
            echo "### 📦 Performance Budgets" >> summary.md
            echo "Check the reports against budgets defined in \`lighthouse-budget.json\`" >> summary.md
          else
            echo "⚠️ No Lighthouse reports were generated. Please check the workflow logs." >> summary.md
          fi
          
          # Save to GitHub step output
          echo "summary_generated=true" >> $GITHUB_OUTPUT

      # Step 12: Post PR comment with summary
      - name: Post PR Comment with Summary
        if: github.event_name == 'pull_request' && steps.summary.outputs.summary_generated == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summaryPath = 'Renthub/summary.md';
            
            let body = '## 🔍 Lighthouse Performance Audit Results\n\n';
            
            if (fs.existsSync(summaryPath)) {
              body = fs.readFileSync(summaryPath, 'utf8');
            } else {
              body += '⚠️ Summary file not found. Check workflow artifacts for reports.\n';
            }
            
            body += '\n---\n';
            body += `🔗 [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            
            // Find existing comment to update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Lighthouse Performance Audit Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
