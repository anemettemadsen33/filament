name: Lighthouse Performance Audit

on:
  # Trigger on push to main branch
  push:
    branches:
      - main
  
  # Trigger on pull requests to main
  pull_request:
    branches:
      - main

jobs:
  lighthouse:
    name: Run Lighthouse CI
    runs-on: ubuntu-latest
    
    # Explicit permissions for security best practices
    permissions:
      contents: read  # Read repository contents
    
    steps:
      # Step 1: Checkout the repository
      # This pulls the code from the repository so we can work with it
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Setup Node.js environment
      # Install Node.js 18 which is required for the project
      # Cache npm dependencies to speed up subsequent runs
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'Renthub/package-lock.json'
      
      # Step 3: Install project dependencies
      # Use 'npm ci' for clean install based on package-lock.json
      # This ensures reproducible builds
      - name: Install dependencies
        run: |
          cd Renthub
          npm ci
      
      # Step 4: Install Lighthouse CI globally
      # This provides the 'lhci' command for running audits
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.13.x
      
      # Step 5: Build the application
      # Compile TypeScript and bundle the Vite app for production
      - name: Build application
        run: |
          cd Renthub
          npm run build
      
      # Step 6: Start preview server in background
      # The preview server serves the built application
      # We use '&' to run it in background and wait-on to ensure it's ready
      - name: Start preview server
        run: |
          cd Renthub
          npm run preview &
          npx wait-on http://localhost:4173 --timeout 60000
      
      # Step 7: Run Lighthouse CI with autorun
      # This automatically discovers URLs and runs audits
      # Reports are generated in .lighthouseci folder
      - name: Run Lighthouse CI
        run: |
          cd Renthub
          lhci autorun
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}
          LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          LHCI_BUILD_CONTEXT__AUTHOR: ${{ github.event.head_commit.author.name }}
      
      # Step 8: Upload Lighthouse reports as artifact
      # Artifacts are stored for 30 days and can be downloaded from the Actions tab
      # if-no-files-found: warn - won't fail if .lighthouseci folder is empty
      # compression-level: 6 - good balance between speed and size
      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: Renthub/.lighthouseci
          retention-days: 30
          if-no-files-found: warn
          compression-level: 6
