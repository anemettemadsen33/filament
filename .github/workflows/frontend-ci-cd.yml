name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Renthub/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Renthub/**'
      - '.github/workflows/frontend-ci-cd.yml'

jobs:
  lint:
    name: Lint & Code Style
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Renthub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './Renthub/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript
        run: npx tsc --noEmit

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Renthub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './Renthub/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Check coverage threshold
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Coverage is below 70%: $COVERAGE%"
            exit 1
          fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./Renthub

    strategy:
      matrix:
        environment: [staging, production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './Renthub/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          if [ "${{ matrix.environment }}" == "production" ]; then
            echo "VITE_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}" > .env.production
            echo "VITE_APP_ENV=production" >> .env.production
            echo "VITE_APP_DEBUG=false" >> .env.production
          else
            echo "VITE_API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}" > .env.staging
            echo "VITE_APP_ENV=staging" >> .env.staging
            echo "VITE_APP_DEBUG=true" >> .env.staging
          fi

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Optimize build
        run: |
          # Remove source maps in production
          if [ "${{ matrix.environment }}" == "production" ]; then
            find dist -name "*.map" -type f -delete
          fi

      - name: Generate build report
        run: |
          echo "Build completed for ${{ matrix.environment }}"
          echo "Build size:"
          du -sh dist/

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-${{ matrix.environment }}
          path: Renthub/dist
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Renthub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './Renthub/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Check for outdated packages
        run: npm outdated || true

  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build-staging
          path: dist

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:8080
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './Renthub/lighthouserc.json'

  deploy-staging:
    name: Deploy to Staging (Netlify)
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.yourdomain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build-staging
          path: dist

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './dist'
          production-branch: develop
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - Staging"
          enable-pull-request-comment: true
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging environment"
          curl -f https://staging.yourdomain.com || exit 1
          curl -f https://staging.yourdomain.com/api/health || exit 1

  deploy-production:
    name: Deploy to Production (Netlify)
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://yourdomain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build-production
          path: dist

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - Production"
          enable-pull-request-comment: false
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}

      - name: Create deployment tag
        run: |
          git tag -a "frontend-v$(date +%Y%m%d-%H%M%S)" -m "Frontend deployment"
          git push --tags

      - name: Run smoke tests on production
        run: |
          echo "Running smoke tests on production environment"
          curl -f https://yourdomain.com || exit 1
          curl -f https://yourdomain.com/api/health || exit 1

      - name: Notify deployment success
        if: success()
        run: echo "Frontend deployed successfully to production!"

  deploy-vercel-alternative:
    name: Deploy to Production (Vercel Alternative)
    runs-on: ubuntu-latest
    needs: [build, security]
    if: false  # Set to true to use Vercel instead of Netlify
    environment:
      name: production-vercel
      url: https://yourdomain.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build-production
          path: dist

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./Renthub

  deploy-static-hosting:
    name: Deploy to Static Hosting (VPS/Hostinger)
    runs-on: ubuntu-latest
    needs: [build, security]
    if: false  # Set to true to use static hosting instead
    environment:
      name: production-static
      url: https://yourdomain.com

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build-production
          path: dist

      - name: Deploy via SFTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./dist/
          server-dir: /public_html/
          dangerous-clean-slate: false

      - name: Deploy via SSH (Alternative)
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.STATIC_HOST }}
          username: ${{ secrets.STATIC_USERNAME }}
          key: ${{ secrets.STATIC_SSH_KEY }}
          port: ${{ secrets.STATIC_PORT }}
          source: "dist/*"
          target: "/var/www/yourdomain.com/"
          strip_components: 1
