name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.renthub.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'Renthub/package-lock.json'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_pgsql, intl, zip, gd
          tools: composer:v2

      - name: Install Frontend Dependencies
        run: |
          cd Renthub
          npm ci

      - name: Build Frontend
        run: |
          cd Renthub
          npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.STAGING_API_URL }}
          VITE_APP_ENV: staging

      - name: Install Backend Dependencies
        run: |
          cd Rental-Platform-main/backend
          composer install --no-dev --optimize-autoloader --prefer-dist

      - name: Create Deployment Package
        run: |
          mkdir -p deployment-package
          
          # Copy backend
          rsync -av --exclude='node_modules' --exclude='.git' \
            --exclude='tests' --exclude='storage/logs/*' \
            Rental-Platform-main/backend/ deployment-package/backend/
          
          # Copy frontend build
          cp -r Renthub/dist deployment-package/frontend

      - name: Deploy to Staging Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          source: "deployment-package/*"
          target: "/var/www/staging"
          strip_components: 1

      - name: Run Deployment Commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/staging/backend
            
            # Set permissions
            chmod -R 755 storage bootstrap/cache
            
            # Run migrations
            php artisan migrate --force
            
            # Clear caches
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            
            # Restart services
            sudo systemctl restart php8.2-fpm
            sudo systemctl reload nginx

      - name: Health Check
        run: |
          sleep 10
          response=$(curl -s -o /dev/null -w "%{http_code}" https://staging.renthub.com/health)
          if [ $response -eq 200 ]; then
            echo "✅ Staging deployment successful - health check passed"
          else
            echo "❌ Staging deployment failed - health check returned $response"
            exit 1
          fi

      - name: Notify Deployment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅ Success' : '❌ Failed';
            const output = `## Staging Deployment ${status}
            
            **Branch**: ${{ github.ref_name }}
            **Commit**: ${{ github.sha }}
            **Environment**: Staging
            **URL**: https://staging.renthub.com
            **Status**: ${status}`;
            
            console.log(output);

  # Run smoke tests after deployment
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run API Health Checks
        run: |
          # Check API health endpoint
          curl -f https://staging.renthub.com/api/health || exit 1
          
          # Check authentication endpoint
          curl -f https://staging.renthub.com/api/v1/auth/ping || exit 1
          
          echo "✅ Smoke tests passed"

      - name: Notify Team
        if: failure()
        run: |
          echo "❌ Smoke tests failed on staging"
          # Add notification logic (Slack, email, etc.)
