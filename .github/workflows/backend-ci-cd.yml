name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Rental-Platform-main/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Rental-Platform-main/**'
      - '.github/workflows/backend-ci-cd.yml'

jobs:
  lint:
    name: Lint & Code Style
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Rental-Platform-main/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pgsql
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Run Laravel Pint (Code Style)
        run: ./vendor/bin/pint --test

      - name: Run PHPStan (Static Analysis)
        run: composer run-script phpstan || true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Rental-Platform-main/backend

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: rental_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: rental_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pgsql
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Copy .env
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Run migrations
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: rental_test
          DB_USERNAME: rental_test
          DB_PASSWORD: test_password
        run: php artisan migrate --force

      - name: Run tests with coverage
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: rental_test
          DB_USERNAME: rental_test
          DB_PASSWORD: test_password
        run: php artisan test --coverage --min=70

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Rental-Platform-main/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Security audit
        run: composer audit

      - name: Check for vulnerable dependencies
        run: |
          composer require --dev enlightn/security-checker
          php artisan security:check || true

  build:
    name: Build & Optimize
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    defaults:
      run:
        working-directory: ./Rental-Platform-main/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Install dependencies
        run: composer install --no-dev --no-progress --prefer-dist --optimize-autoloader

      - name: Optimize autoloader
        run: composer dump-autoload --optimize

      - name: Cache config
        run: php artisan config:cache || true

      - name: Cache routes
        run: php artisan route:cache || true

      - name: Cache views
        run: php artisan view:cache || true

      - name: Create artifact
        run: |
          cd ..
          tar -czf backend-build.tar.gz backend

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: Rental-Platform-main/backend-build.tar.gz
          retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging-api.yourdomain.com

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            cd /var/www/rental-platform-staging
            git pull origin develop
            cd backend
            composer install --no-dev --optimize-autoloader
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan queue:restart
            sudo systemctl reload php8.3-fpm
            sudo systemctl reload nginx

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.yourdomain.com

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build

      - name: Create deployment tag
        run: |
          git tag -a "backend-v$(date +%Y%m%d-%H%M%S)" -m "Backend deployment"
          git push --tags

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /var/www/rental-platform
            git pull origin main
            cd backend
            composer install --no-dev --optimize-autoloader
            php artisan down
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan queue:restart
            php artisan up
            sudo systemctl reload php8.3-fpm
            sudo systemctl reload nginx

      - name: Notify deployment
        if: success()
        run: echo "Backend deployed successfully to production!"

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /var/www/rental-platform/backend
            git reset --hard HEAD~1
            composer install --no-dev --optimize-autoloader
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan up
